# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: master
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kubernetes_asyncio.client.models.v1_node_selector import V1NodeSelector
from kubernetes_asyncio.client.models.v1beta1_device_attribute import V1beta1DeviceAttribute
from kubernetes_asyncio.client.models.v1beta1_device_capacity import V1beta1DeviceCapacity
from kubernetes_asyncio.client.models.v1beta1_device_counter_consumption import V1beta1DeviceCounterConsumption
from kubernetes_asyncio.client.models.v1beta1_device_taint import V1beta1DeviceTaint
from typing import Optional, Set
from typing_extensions import Self

class V1beta1BasicDevice(BaseModel):
    """
    BasicDevice defines one device instance.
    """ # noqa: E501
    all_nodes: Optional[StrictBool] = Field(default=None, description="AllNodes indicates that all nodes have access to the device.  Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.", alias="allNodes")
    attributes: Optional[Dict[str, V1beta1DeviceAttribute]] = Field(default=None, description="Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.  The maximum number of attributes and capacities combined is 32.")
    capacity: Optional[Dict[str, V1beta1DeviceCapacity]] = Field(default=None, description="Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.  The maximum number of attributes and capacities combined is 32.")
    consumes_counters: Optional[List[V1beta1DeviceCounterConsumption]] = Field(default=None, description="ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.  There can only be a single entry per counterSet.  The total number of device counter consumption entries must be <= 32. In addition, the total number in the entire ResourceSlice must be <= 1024 (for example, 64 devices with 16 counters each).", alias="consumesCounters")
    node_name: Optional[StrictStr] = Field(default=None, description="NodeName identifies the node where the device is available.  Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.", alias="nodeName")
    node_selector: Optional[V1NodeSelector] = Field(default=None, alias="nodeSelector")
    taints: Optional[List[V1beta1DeviceTaint]] = Field(default=None, description="If specified, these are the driver-defined taints.  The maximum number of taints is 4.  This is an alpha field and requires enabling the DRADeviceTaints feature gate.")
    __properties: ClassVar[List[str]] = ["allNodes", "attributes", "capacity", "consumesCounters", "nodeName", "nodeSelector", "taints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1BasicDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key_attributes in self.attributes:
                if self.attributes[_key_attributes]:
                    _field_dict[_key_attributes] = self.attributes[_key_attributes].to_dict()
            _dict['attributes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in capacity (dict)
        _field_dict = {}
        if self.capacity:
            for _key_capacity in self.capacity:
                if self.capacity[_key_capacity]:
                    _field_dict[_key_capacity] = self.capacity[_key_capacity].to_dict()
            _dict['capacity'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in consumes_counters (list)
        _items = []
        if self.consumes_counters:
            for _item_consumes_counters in self.consumes_counters:
                if _item_consumes_counters:
                    _items.append(_item_consumes_counters.to_dict())
            _dict['consumesCounters'] = _items
        # override the default output from pydantic by calling `to_dict()` of node_selector
        if self.node_selector:
            _dict['nodeSelector'] = self.node_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taints (list)
        _items = []
        if self.taints:
            for _item_taints in self.taints:
                if _item_taints:
                    _items.append(_item_taints.to_dict())
            _dict['taints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1BasicDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allNodes": obj.get("allNodes"),
            "attributes": dict(
                (_k, V1beta1DeviceAttribute.from_dict(_v))
                for _k, _v in obj["attributes"].items()
            )
            if obj.get("attributes") is not None
            else None,
            "capacity": dict(
                (_k, V1beta1DeviceCapacity.from_dict(_v))
                for _k, _v in obj["capacity"].items()
            )
            if obj.get("capacity") is not None
            else None,
            "consumesCounters": [V1beta1DeviceCounterConsumption.from_dict(_item) for _item in obj["consumesCounters"]] if obj.get("consumesCounters") is not None else None,
            "nodeName": obj.get("nodeName"),
            "nodeSelector": V1NodeSelector.from_dict(obj["nodeSelector"]) if obj.get("nodeSelector") is not None else None,
            "taints": [V1beta1DeviceTaint.from_dict(_item) for _item in obj["taints"]] if obj.get("taints") is not None else None
        })
        return _obj


