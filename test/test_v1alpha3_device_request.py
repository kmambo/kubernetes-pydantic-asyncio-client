# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: master
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes_asyncio.client.models.v1alpha3_device_request import V1alpha3DeviceRequest

class TestV1alpha3DeviceRequest(unittest.TestCase):
    """V1alpha3DeviceRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1alpha3DeviceRequest:
        """Test V1alpha3DeviceRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1alpha3DeviceRequest`
        """
        model = V1alpha3DeviceRequest()
        if include_optional:
            return V1alpha3DeviceRequest(
                admin_access = True,
                allocation_mode = '',
                count = 56,
                device_class_name = '',
                first_available = [
                    kubernetes_asyncio.client.models.v1alpha3/device_sub_request.v1alpha3.DeviceSubRequest(
                        allocation_mode = '', 
                        count = 56, 
                        device_class_name = '', 
                        name = '', 
                        selectors = [
                            kubernetes_asyncio.client.models.v1alpha3/device_selector.v1alpha3.DeviceSelector(
                                cel = kubernetes_asyncio.client.models.v1alpha3/cel_device_selector.v1alpha3.CELDeviceSelector(
                                    expression = '', ), )
                            ], 
                        tolerations = [
                            kubernetes_asyncio.client.models.v1alpha3/device_toleration.v1alpha3.DeviceToleration(
                                effect = '', 
                                key = '', 
                                operator = '', 
                                toleration_seconds = 56, 
                                value = '', )
                            ], )
                    ],
                name = '',
                selectors = [
                    kubernetes_asyncio.client.models.v1alpha3/device_selector.v1alpha3.DeviceSelector(
                        cel = kubernetes_asyncio.client.models.v1alpha3/cel_device_selector.v1alpha3.CELDeviceSelector(
                            expression = '', ), )
                    ],
                tolerations = [
                    kubernetes_asyncio.client.models.v1alpha3/device_toleration.v1alpha3.DeviceToleration(
                        effect = '', 
                        key = '', 
                        operator = '', 
                        toleration_seconds = 56, 
                        value = '', )
                    ]
            )
        else:
            return V1alpha3DeviceRequest(
                name = '',
        )
        """

    def testV1alpha3DeviceRequest(self):
        """Test V1alpha3DeviceRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
