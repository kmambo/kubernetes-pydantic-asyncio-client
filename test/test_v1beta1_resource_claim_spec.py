# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: master
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from kubernetes_asyncio.client.models.v1beta1_resource_claim_spec import V1beta1ResourceClaimSpec

class TestV1beta1ResourceClaimSpec(unittest.TestCase):
    """V1beta1ResourceClaimSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta1ResourceClaimSpec:
        """Test V1beta1ResourceClaimSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1beta1ResourceClaimSpec`
        """
        model = V1beta1ResourceClaimSpec()
        if include_optional:
            return V1beta1ResourceClaimSpec(
                devices = kubernetes_asyncio.client.models.v1beta1/device_claim.v1beta1.DeviceClaim(
                    config = [
                        kubernetes_asyncio.client.models.v1beta1/device_claim_configuration.v1beta1.DeviceClaimConfiguration(
                            opaque = kubernetes_asyncio.client.models.v1beta1/opaque_device_configuration.v1beta1.OpaqueDeviceConfiguration(
                                driver = '', 
                                parameters = kubernetes_asyncio.client.models.parameters.parameters(), ), 
                            requests = [
                                ''
                                ], )
                        ], 
                    constraints = [
                        kubernetes_asyncio.client.models.v1beta1/device_constraint.v1beta1.DeviceConstraint(
                            match_attribute = '', )
                        ], 
                    requests = [
                        kubernetes_asyncio.client.models.v1beta1/device_request.v1beta1.DeviceRequest(
                            admin_access = True, 
                            allocation_mode = '', 
                            count = 56, 
                            device_class_name = '', 
                            first_available = [
                                kubernetes_asyncio.client.models.v1beta1/device_sub_request.v1beta1.DeviceSubRequest(
                                    allocation_mode = '', 
                                    count = 56, 
                                    device_class_name = '', 
                                    name = '', 
                                    selectors = [
                                        kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector(
                                            cel = kubernetes_asyncio.client.models.v1beta1/cel_device_selector.v1beta1.CELDeviceSelector(
                                                expression = '', ), )
                                        ], )
                                ], 
                            name = '', 
                            selectors = [
                                kubernetes_asyncio.client.models.v1beta1/device_selector.v1beta1.DeviceSelector()
                                ], )
                        ], )
            )
        else:
            return V1beta1ResourceClaimSpec(
        )
        """

    def testV1beta1ResourceClaimSpec(self):
        """Test V1beta1ResourceClaimSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
